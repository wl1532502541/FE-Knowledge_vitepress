import{_ as t,c as a,an as p,o as r}from"./chunks/framework.CkyLdKpM.js";const f=JSON.parse('{"title":"网络模型","description":"","frontmatter":{},"headers":[],"relativePath":"计算机网络相关/0 网络模型.md","filePath":"计算机网络相关/0 网络模型.md","lastUpdated":1634152441000}'),i={name:"计算机网络相关/0 网络模型.md"};function l(o,e,P,n,s,c){return r(),a("div",null,e[0]||(e[0]=[p('<h1 id="网络模型" tabindex="-1">网络模型 <a class="header-anchor" href="#网络模型" aria-label="Permalink to &quot;网络模型&quot;">​</a></h1><h2 id="一、tcp-ip网络模型" tabindex="-1">一、TCP/IP网络模型 <a class="header-anchor" href="#一、tcp-ip网络模型" aria-label="Permalink to &quot;一、TCP/IP网络模型&quot;">​</a></h2><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。</p><p>TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。</p><p>TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p><ul><li>链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。</li><li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li><li>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</li><li>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b87668471004dffbe71ee14b7bd8c8d~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p>在网络体系结构中网络通信的建立必须是在通信双方的对等层进行，不能交错。 在整个数据传输过程中，数据在发送端时经过各层时都要附加上相应层的协议头和协议尾（仅数据链路层需要封装协议尾）部分，也就是要对数据进行协议封装，以标识对应层所用的通信协议。接下去介绍TCP/IP 中有两个具有代表性的传输层协议----TCP 和 UDP。</p><p>参考：<a href="https://juejin.cn/post/6992743999756845087" target="_blank" rel="noreferrer">https://juejin.cn/post/6992743999756845087</a></p>',9)]))}const T=t(i,[["render",l]]);export{f as __pageData,T as default};
